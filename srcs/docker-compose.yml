services:

  # mariadb container ------------------------------------------------------------

  # this is the only container that no depend on the others, so its the first to be created
  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb/
    volumes:
      - mariadb:/var/lib/mysql/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env

  # wordpress container ------------------------------------------------------------

  # this is the second container to be created, it depends on the mariadb container
  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress/
    volumes:
      - wordpress:/var/www/html/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - mariadb

  # nginx container ------------------------------------------------------------

  # this is the last container to be created, it depends on the wordpress container
  # it use args to pass the certificate and key path to the Dockerfile
  # in the build moment with show the private informations that where in the .env file
  nginx:
    container_name: nginx
    build:
      context: ./requirements/nginx/
      args:
        CERT_FOLDER: ${CERT_FOLDER}
        CERTIFICATE: ${CERTIFICATE}
        KEY: ${KEY}
        COUNTRY: ${COUNTRY}
        STATE: ${STATE}
        LOCALITY: ${LOCALITY}
        ORGANIZATION: ${ORGANIZATION}
        UNIT: ${UNIT}
        COMMON_NAME: ${COMMON_NAME}
    ports:
      - '443:443'
    volumes:
      - wordpress:/var/www/html/
    networks:
      - all
    init: true
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - wordpress
  # static website
  website:
    build:
      context: ./requirements/bonus/portfolio/
    container_name: my-portfolio
    ports:
      - '8080:3000'
    # volumes:
      # # For development: mount the website directory for live changes
      # # Comment this out for production
      # - ./website:/app/website
    restart: on-failure

  # # Adminer
  adminer:
    container_name: adminer
    build:
      context: ./requirements/bonus/Adminer/
    ports:
      - "8081:8080"
    networks:
      - all
    init: true
    restart: on-failure
    depends_on:
      - mariadb
  # # Redis
  redis:
    container_name: redis
    build:
      context: ./requirements/bonus/Redis/
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    networks:
      - all
    init: true
    restart: on-failure

  # # FTP
  ftp:
    build: requirements/bonus/FTP/
    container_name: ftp
    image: ftp:tar
    env_file:
      - .env
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - wordpress:/var/www/html/
    networks:
      - all
    restart: on-failure
  

  cadvisor:
    container_name: cadvisor
    build:
      context: ./requirements/bonus/Cadvisor/
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8084:8084"
    networks:
      - all
    restart: on-failure
 




# volumes --------------------------------------------------------------------

# keeps the data shared between the containers
# it acts like a shared hard drive between the containers and the host machine
# device: where the data will be stored in the host machine
volumes:

  # keeps the database
  mariadb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/mariadb

  # keeps the wordpress files
  wordpress:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/wordpress
  # keeps the redis data
  redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/redis


# networks --------------------------------------------------------------------

# this network is used to connect the containers
# it acts like a virtual switch between the containers
# all is the name of the network
# bridge is the type of the network
networks:
  all:
    driver: bridge